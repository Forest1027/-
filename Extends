继承
概述：子类继承父类的非私有的成员变量和成员方法
子类不能直接访问父类中的私有内容。但是如果父类有setter/getter方法，则可以间接访问私有成员变量
注意：构造方法不能继承
格式
public class 子类extends 父类 {
}

举例：
		class CatFamily{				// 猫科
			int age;
			String color;
			String leg;
			
		}				
		class Cat extends CatFamily{}	// 猫
		class Tiger extends CatFamily{}	// 老虎
		class Chicken extends CatFamily{}// 错误的思想
		
		注：Java中的继承描述的是类与类之间的所属关系，只有当一个类是属于另一个类的一种时，
			满足is a关系时，才能使用继承，不能为了继承而继承
特点
1.	一个父类可以有多个子类
2.	Java语言的类只支持单继承，一个子类只能有一个父类
3.	可以多层继承。一个父类可以是另一个类的子类
继承成员变量的特点
1.	子类只能继承父类的非私有成员变量
2.	就近原则（谁离得近就用谁）
如果有局部变量就使用局部变量
如果没有局部变量，有子类的成员变量就使用子类的成员变量（如果子类的成员变量和父类的成员变量的名字一样，用子类的）
如果没有局部变量和子类的成员变量，有父类的成员变量就使用父类的成员变量
3. 	super:可以获取父类的成员变量和成员方法,用法和this是相似的
继承成员方法的特点
1.	子类只能继承父类的非私有成员方法
2.	子类中没有方法，就调用父类的
3.	方法的重写：在子父类当中，子类的方法和父类的完全一样（方法名和参数列表），子类重写了父类的方法（覆盖），当子类重写了父类的方法之后，使用子类对象调用的就是子类的方法
方法重写的应用场景和注意事项
方法重写的应用场景：当父类的方法不能完全满足子类使用的时候，既可以保留父类的功能（沿袭、传承），还可以有自己特有的功能
在开发中，不想直接修改原代码，毕竟一旦改了，就很难改回来，而一旦改失误，后果可能是灾难性的。因此，在开发中，经常会新定义一个类，让该类继承想修改的那个类。如此，新类具备了原类的功能，并且可利用重写，在原有功能上面进行新功能的添加。
    方法重写的注意事项：
  		* 两同两小一大
		
		两同：
			方法名一定相同
			参数列表一定要相同
		两小：（不是很懂）
			子类方法的返回类型小于等于父类方法的返回值类型
			子类方法抛出的异常小于等于父类方法抛出的异常
		一大
			子类的方法的权限修饰符大于等于父类方法的权限修饰符
			
			权限修饰包括四种：public>protected>默认>private
		
		
		总结：方法重写时，一般方法签名（声明）保持和父类的方法签名（声明）一致，修改方法体中的内容即可  	
注解
    		@Override：方法重写，说明下面的方法是重写父类的方法	
方法重写和重载辨析
		方法重载：在同一个类中，方法名相同，参数列表不同，和返回值类型和权限修饰符都无关
		方法重写：在两个类（子父类）中，方法名相同，参数列表相同，
				子类权限修饰符大于等于父类方法的权限修饰符，子类返回值类型小于等于父类方法的返回值类型
继承中构造方法的执行顺序
 * 			在子父类中，创建子类对象，调用子类的构造方法，
 * 			在子类的构造方法的第一行代码如果没有调用父类的构造或者没有调用子类的其他构造（没有super或this），则默认调用父类无参构造
 * 为什么要调用父类构造？
 * 			因为需要给父类的成员变量初始化
 * 肯定会先把父类的构造执行完毕，在去执行子类构造中的其他代码
代码： 结果为“我是父类有参”-“我是子类有参”-“我是子类无参”
public class ExtendsSequence {
	public static void main(String[] args) {
		Zi6 z = new Zi6();
	}
}
class Die6 {
	public Die6(){
		System.out.println("我是父类无参构造");
	}
	public Die6(int i) {
		System.out.println("我是父类有参构造");
	}
}
class Zi6 extends Die6 {
	public Zi6() {
		this(1);
		System.out.println("我是子类无参构造");
	}
	public Zi6(int i ) {
		super(1);
		System.out.println("我是子类有参构造");
	}
}
this和super的区别
		this:当前对象的引用
			调用子类的成员变量
			调用子类的成员方法
			在子类的构造方法第一行调用子类其他构造方法
		super:子类对象的父类引用
			调用父类的成员变量
			调用父类的成员方法
			在子类的构造方法第一行调用父类的构造方法


闪闪发光的练习题们
下面关于 this和super描述正确的是(C )        
    A 、  都可以用在main()方法中
    B 、  都是指一个对象的内存地址
    C 、  不能用在main()方法中
    D 、  意义相同
继承优缺点
A:优点
提高了代码的复用性
提高了代码的可维护性（修改某一共享功能，一改则全改）
使类与类之间产生了关联关系，形成继承体系，方便对类的研究
是多态的前提之一
B:缺点：
类的耦合性增强了
开发的原则：高内聚低耦合
内聚：就是自己完成某件事情的能力
耦合：类与类的关系
匿名对象
匿名对象即无名对象,直接使用new关键字来创建对象
应用场景：
		当方法只调用一次的时候使用
		当做方法的实参传递
代码：
public class AnonymousObject {
	public static void main(String[] args) {
		method(new Student());
		method();
	}
	public static void method(Student s) {
		System.out.println("method方法");
	}
}
class Student {
	String name;
	int age;
	public Student() {
		
	}
}
final关键字
   final： 修饰符，可以用于修饰类、成员方法和成员变量
   final所修饰的类：不能被继承，不能有子类
   final所修饰的成员方法:不能被重写。可以被继承
   final所修饰的变量（局部变量和成员变量）：是不可以修改的，是常量
final修饰的方法可以被重载，不能被重写（覆盖）
闪闪发光的练习题们：
6 . 下面关于final说法错误的是 ( A  )        
    A 、 final修饰的类不可以继承其他类
    B 、  内部类在访问局部变量的时候，局部变量需要使用final修饰
C 、  被final修饰的引用类型变量内部的内容是可以发生变化的
//final修饰引用类型变量，不能改变的是其地址值（不能把新new出来的对象再次赋给这个变量）。内容是可以变得
   		   D 、 final修饰的变量称为常量，这些变量只能赋值一次。
抽象类
存在原因
分析事物时，发现了共性内容，就出现向上抽取。会有这样一种特殊情况，就是方法功能声明相同，但方法功能主体不同。那么这时也可以抽取，但只抽取方法声明，不抽取方法主体。那么此方法就是一个抽象方法。
规定一个格式，来规范一系列类的书写。
抽象类的特点
  		抽象方法只能在抽象类里面（有抽象方法的类一定是抽象类）
  		抽象类和抽象方法必须被abstract修饰
  		抽象类不能创建对象（不能实例化）
 		抽象类中可以有非抽象的方法
 		抽象类和类的关系也是继承（没有子类的抽象类没有意义）
 		一个类继承了抽象类——要么重写所有的抽象方法，要么他自己是抽象类
抽象类的成员的特点
  		成员变量
  			可以有成员变量
  			可以有常量（final修饰的变量）
  		成员方法
  			可以有抽象方法
  			可以有非抽象方法
  		构造方法
  			可以有构造方法的，需要对抽象类的成员变量进行初始化
代码：
public class AbstractCompanyDemo {
	public static void main(String[] args) {
		Programmer p = new Programmer();
		p.name = "吳彥祖";
		p.work();
		Manager m = new Manager();
		m.name = "周傑倫";
		m.work();
	}
}
abstract class Employee {
	String name;
	String id;
	String salary;
	public abstract void work();
}
class Programmer extends Employee {
	public void work() {
		System.out.println(name+"寫代碼工作");
	}
}
class Manager extends Employee {
	public void work() {
		System.out.println(name+"盯着程序员写代码工作");
	}
}
 
抽象类的细节
A:抽象类关键字abstract不可以和哪些关键字共存?（private, static, final）（关键在于抽象方法被重写才有意义）
1.private：
私有的方法子类是无法继承到的，也不存在重写，而abstract和private一起使用修饰方法，abstract既要子类去实现这个方法，而private修饰子类根本无法得到父类这个方法。互相矛盾。
另外，用private修饰抽象类的构造方法，也会导致子类无法继承该抽象类
2.final: 
 抽象类不能和final共存,因为抽象类自身无法创建对象,我们需要通过子类创建对象,一旦抽象类使用final关键字,那么抽象类就没有子类
抽象方法不能和final共存,因为抽象方法后期需要被子类重写,一旦加final无法重写   
3.static:
抽象方法不能和static关键字共存,因为一旦加static我们就可以通过类名直接访问抽象方法,由于抽象方法没有方法体,没有任何意义,也不允许这样做

B:抽象类中是否可以不定义抽象方法?
是可以的，那这个抽象类的存在到底有什么意义呢？不让该类创建对象,方法可以直接让子类去使用

C:抽象类是否有构造函数? 
有,抽象类的构造函数,是由子类的super语句来调用,用于给抽象类中的成员初始化
 
